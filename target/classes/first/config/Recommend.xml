<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	 
	 <mapper namespace="recommend">
	 
	 <!-- 추천할 때 추천 관계 테이블에 정보 입력 -->
	 <insert id="insert" parameterType="java.util.Map">
	 INSERT INTO RECOMMEND VALUES (SEQ_RECOMMEND.NEXTVAL, #{member_id}, #{board_id})
	 </insert> 
	 
	 <!-- 추천한 글인지 확인하기 -->
	 <select id="check" resultType="int" parameterType="java.util.Map">
	 SELECT count(recommend_id) FROM recommend WHERE member_id = #{session_id} and board_id = #{board_id}
	 </select>
	 
	 
	 <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 로그인 시 취향이 비슷한 게시글 추천 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
	  <!-- 추천 및 스크랩 테이블에 있는 회원 목록 불러오기 -->
	 <select id="alllist" resultType="java.util.Map">
	 SELECT DISTINCT member_id FROM recommend
	 UNION
     SELECT DISTINCT member_id FROM scrap
	 </select>
	 
	 <!-- 추천 및 스크랩 테이블에 있는 회원과 접속중인 회원과의 코사인 유사도 구하기 -->
	 <select id="similarity" resultType="java.util.HashMap" parameterType="java.util.Map">
	   SELECT ROUND(DECODE(sum(my_v*you_v),0,NULL,sum(my_v*you_v))/DECODE((SQRT(sum(power(my_v,2)))*SQRT(sum(power(you_v,2)))),0,NULL,(SQRT(sum(power(my_v,2)))*SQRT(sum(power(you_v,2))))),5) as similarity, #{compare_member_id} as member_id FROM
   (SELECT NVL(a.vector,0) as my_v, NVL(b.vector,0) as you_v FROM 
     ((SELECT board_id, DECODE(rownum,rownum,2) as vector FROM (SELECT board_id FROM recommend WHERE member_id = #{member_id} INTERSECT SELECT board_id FROM scrap WHERE member_id = #{member_id}) 
       UNION ALL   
     SELECT board_id, DECODE(rownum,rownum,1) as vector FROM (SELECT board_id FROM recommend WHERE member_id = #{member_id} MINUS SELECT board_id FROM scrap WHERE member_id = #{member_id})) 
       UNION ALL
     SELECT board_id, DECODE(rownum,rownum,1) as vector FROM (SELECT board_id FROM scrap WHERE member_id = #{member_id} MINUS SELECT board_id FROM recommend WHERE member_id = #{member_id})) a
   FULL OUTER JOIN
     ((SELECT board_id, DECODE(rownum,rownum,2) as vector FROM (SELECT board_id FROM recommend WHERE member_id = #{compare_member_id} INTERSECT SELECT board_id FROM scrap WHERE member_id = #{compare_member_id}) 
       UNION ALL   
     SELECT board_id, DECODE(rownum,rownum,1) as vector FROM (SELECT board_id FROM recommend WHERE member_id = #{compare_member_id} MINUS SELECT board_id FROM scrap WHERE member_id = #{compare_member_id})) 
       UNION ALL
     SELECT board_id, DECODE(rownum,rownum,1) as vector FROM (SELECT board_id FROM scrap WHERE member_id = #{compare_member_id} MINUS SELECT board_id FROM recommend WHERE member_id = #{compare_member_id})) b 
   ON a.board_id = b.board_id)
     GROUP BY #{compare_member_id}
	 </select>
	 
	 <!-- 추천 글 가져오기(조회높은 순) -->
	 <select id="recommendlist" resultType="java.util.Map" parameterType="java.util.Map">
	 <![CDATA[((SELECT board_id,board_title,bgroup_id,board_hit,rownum FROM (SELECT a.board_id,b.board_title,b.bgroup_id,b.board_hit FROM (SELECT board_id FROM recommend WHERE member_id = #{compare_member_id}) a 
	 INNER JOIN board b ON a.board_id = b.board_id ORDER BY b.board_hit DESC) WHERE rownum <= 3)
	   MINUS
	 (SELECT board_id,board_title,bgroup_id,board_hit,rownum FROM (SELECT a.board_id,b.board_title,b.bgroup_id,b.board_hit FROM (SELECT board_id FROM recommend WHERE member_id = #{member_id}) a 
	 INNER JOIN board b ON a.board_id = b.board_id ORDER BY b.board_hit DESC) WHERE rownum <= 3))
   UNION
  ((SELECT board_id,board_title,bgroup_id,board_hit,rownum FROM (SELECT a.board_id,b.board_title,b.bgroup_id,b.board_hit FROM (SELECT board_id FROM scrap WHERE member_id = #{compare_member_id}) a 
	 INNER JOIN board b ON a.board_id = b.board_id ORDER BY b.board_hit DESC) WHERE rownum <= 3)
	   MINUS
	 (SELECT board_id,board_title,bgroup_id,board_hit,rownum FROM (SELECT a.board_id,b.board_title,b.bgroup_id,b.board_hit FROM (SELECT board_id FROM scrap WHERE member_id = #{member_id}) a 
	 INNER JOIN board b ON a.board_id = b.board_id ORDER BY b.board_hit DESC) WHERE rownum <= 3)) ORDER BY board_hit DESC]]>
	 </select>
	 
	 <!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ검색시 글 추천 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
	 <!-- 검색어를 공백으로 구분하여 각 구분자가 포함된 게시글의 번호를 가져온다 -->
	 <select id="recommendsearch" resultType="java.util.Map" parameterType="java.util.Map">
	 SELECT board_id FROM board WHERE
	 	<choose>
		 	<when test="search_list.size != 0">
		 		<foreach collection="search_list" item="search" separator="OR">
	 				board_title like '%'||#{search}||'%' OR board_content like '%'||#{search}||'%' OR board_nickname like '%'||#{search}||'%'
	 			</foreach>
	 		</when>
	 	</choose>
	 </select>
	 
	 </mapper>