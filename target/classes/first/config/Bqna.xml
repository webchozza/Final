<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bqna">

	<!-- qna 리스트 -->
	<select id="bqnaList" resultType="first.com.model.BoardDTO">
	SELECT e.*, count(f.scrap_id) scrap_count FROM (SELECT c.board_id, c.member_id, c.board_title,c.board_content,
	c.board_date,c.board_nickname,c.board_hit,c.board_like,c.board_bad,
	c.board_comment_count,c.board_password,c.board_ip,c.board_filecount,
	c.bgroup_id,c.board_tag,
	NVL(count(d.bcomment_id), 0) as answerCheckNum FROM(SELECT a.*,b.bcomment_id FROM(SELECT * 
	FROM board WHERE bgroup_id = 4 
	<if test="n!=0">
			AND
			<if test="n==1">board_title</if>
			<if test="n==2">board_content</if>
			<if test="n==3">board_nickname</if>
			LIKE '%'||#{search}||'%'
	</if>
	) a LEFT OUTER JOIN bcomment b ON a.board_id = b.board_id) c LEFT OUTER JOIN answer d ON c.bcomment_id = d.bcomment_id 
	GROUP BY c.board_id, c.member_id, c.board_title,c.board_content,
	c.board_date,c.board_nickname,c.board_hit,c.board_like,c.board_bad,
	c.board_comment_count,c.board_password,c.board_ip,c.board_filecount,
	c.bgroup_id,c.board_tag) e LEFT OUTER JOIN scrap f ON e.board_id = f.board_id
	GROUP BY e.board_id, e.member_id, e.board_title,e.board_content,
	e.board_date,e.board_nickname,e.board_hit,e.board_like,e.board_bad,
	e.board_comment_count,e.board_password,e.board_ip,e.board_filecount,
	e.bgroup_id,e.board_tag,e.answerCheckNum 
			<if test="sort!=''">
			ORDER BY
			<if test="sort== 'like'">e.board_like</if>
			<if test="sort== 'comment'">e.board_comment_count</if>
			<if test="sort== 'scrap'">scrap_count</if><!-- ★수정필요 -->
			<if test="sort== 'hit'">e.board_hit</if>
			DESC, e.board_id DESC
		</if>
		<if test="sort==''">
			ORDER BY e.board_id DESC
		</if>
	</select>

	<!-- 글쓰기 -->
	<insert id="bqnaWrite" parameterType="int">
		INSERT INTO board
		(board_id, member_id, board_title, board_content, board_date,
		board_nickname, board_hit, board_like, board_bad, board_comment_count,
		bgroup_id, board_tag)
		VALUES
		(seq_board.NEXTVAL, #{member_id},
		#{board_title},
		#{board_content}, SYSDATE, #{board_nickname}, 0, 0, 0,
		0, 4, #{board_tag})
	</insert>

	<!-- 댓글수업데이트 -->
	<update id="bqnaUpdateCountco" parameterType="Integer">
		UPDATE board
		SET
		board_comment_count = (SELECT count(*) FROM bcomment WHERE board_id =
		#{board_id})
		WHERE board_id= #{board_id}
	</update>

	<!-- 상세보기 -->
	<select id="bqnaDetail" resultType="first.com.model.BoardDTO"
		parameterType="Integer">
		SELECT * FROM board
		WHERE board_id = #{board_id}
	</select>

	<!-- 조회수증가 -->
	<update id="bqnaUpdateHit" parameterType="int">
		UPDATE board
		SET
		board_hit = board_hit + 1
		WHERE
		board_id = #{board_id}
	</update>

	<!-- 글수정 -->
	<update id="bqnaModify" parameterType="first.com.model.BoardDTO">
		UPDATE board
		SET
		board_title=#{board_title},
		board_content=#{board_content},
		board_tag=#{board_tag}
		WHERE
		board_id=#{board_id}
	</update>

	<!-- 글삭제 -->
	<update id="bqnaDelete" parameterType="first.com.model.BoardDTO">
		DELETE FROM board WHERE
		board_id=#{board_id}
	</update>

	<!-- 좋아요 -->
	<update id="bqnaUpdateLike" parameterType="Integer">
		UPDATE board
		SET
		board_like= board_like+1
		WHERE
		board_id= #{board_id}
	</update>

	<!-- 댓글목록 -->
	<select id="bcqnaList" resultType="first.com.model.BcommentDTO">
		SELECT a.*,b.bcomment_id as answer FROM(SELECT
		bcomment_id,board_id,bgroup_id,bcomment_content,bcomment_date,bcomment_password,member_id,member_name
		FROM (SELECT * FROM bcomment INNER JOIN member USING(member_id) WHERE
		board_id=#{board_id}) ORDER BY bcomment_id) a left outer join ANSWER b on a.board_id=b.board_id
	</select>

	<!-- 댓글쓰기 -->
	<insert id="bcqnaWrite" parameterType="first.com.model.BcommentDTO">
		INSERT INTO
		bcomment(bcomment_id, board_id, bgroup_id, bcomment_content,
		bcomment_date, member_id)
		VALUES(seq_comment.NEXTVAL, #{board_id}, 4,
		#{bcomment_content}, SYSDATE, #{member_id})
	</insert>

	<!-- 댓글삭제 -->
	<delete id="bcqnaDelete" parameterType="first.com.model.BcommentDTO">
		DELETE bcomment
		WHERE
		bcomment_id=#{bcomment_id}
	</delete>
	
	<!-- 답변채택 -->
	<insert id="bqnaAnswerChoice" parameterType="java.util.Map">
		INSERT INTO
		answer values (seq_answer.nextval, #{member_id}, #{bcomment_id}, #{board_id})
	</insert>
	
	<!-- 답변채택글확인 -->
	<select id="bqnaAnswerCheck" parameterType="int" resultType="int">
		select NVL(count(b.bcomment_id),0) 
		FROM (Select * FROM bcomment WHERE board_id = #{board_id}) a 
		INNER JOIN answer b ON a.bcomment_id = b.bcomment_id
	</select>
	
	<!-- 답변채택취소 -->
	<delete id="bqnaAnswerDelete" parameterType="integer">
		DELETE answer
		WHERE bcomment_id=#{bcomment_id}
	</delete>

</mapper>