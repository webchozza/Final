<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="main">

	<select id="allSearchList" resultType="first.com.model.BoardDTO" parameterType="java.util.Map">
	SELECT * FROM (SELECT board_id, member_id, board_title, board_content, board_date, board_nickname, board_hit, board_like, 
	board_comment_count, bgroup_id, scrap_count, 
	<choose>
		<when test="searchlist.size != 0 and searchlist[0] != ''">
		searchcount, 
		</when>
	</choose>
	rownum r FROM (SELECT b.*, count(a.scrap_id) as scrap_count FROM 
	(SELECT board_id, member_id, board_title, board_content, board_date, board_nickname, board_hit, board_like, board_comment_count, bgroup_id 
	<choose>
		<when test="searchlist.size != 0 and searchlist[0] != ''">
			,(
			<foreach collection="searchlist" item="search" separator="+">
			(SUM(NVL((length(BOARD_TITLE) - length(replace(BOARD_TITLE,#{search},''))) ,1)
			+NVL((length(BOARD_CONTENT) - length(replace(BOARD_CONTENT,#{search},''))) ,1)
			+NVL((length(BOARD_NICKNAME) - length(replace(BOARD_NICKNAME,#{search},''))) ,1)))
			</foreach>
	 	)as searchcount
		</when>
	</choose>
    FROM board GROUP BY board_id, member_id, board_title, board_content, board_date, board_nickname, board_comment_count, board_hit, board_like, 
    board_comment_count, bgroup_id) b LEFT OUTER JOIN scrap a ON a.board_id = b.board_id 
    GROUP BY b.board_id, b.member_id, b.board_title, 
    b.board_content, b.board_date, b.board_nickname, b.board_hit, b.board_like, b.board_comment_count, b.bgroup_id 
    <choose>
		<when test="searchlist.size != 0 and searchlist[0] != ''">
	    , searchcount 
	    </when>
	</choose>
	ORDER BY
	<choose>
		<when test="searchlist.size != 0 and searchlist[0] != ''">
	    searchcount DESC, 
	    </when>
	</choose>
	${category} DESC)<![CDATA[ WHERE rownum <= #{endrow}) WHERE ]]> 
	<choose>
		<when test="searchlist.size != 0 and searchlist[0] != ''">
		searchcount != 0 AND 
		</when>
	</choose>
	<![CDATA[r >= #{startrow} ]]>
	</select>

	<!-- 페이징에 사용할 totalcount 구하기 -->
	<select id="allBoardCount" resultType="int" parameterType="java.util.Map">
		SELECT COUNT(board_id) FROM (SELECT board_id
		<choose>
			<when test="searchlist.size != 0 and searchlist[0] != ''">
			,(
				<foreach collection="searchlist" item="search" separator="+">
				(SUM(NVL((length(BOARD_TITLE) - length(replace(BOARD_TITLE,#{search},''))) ,1)
			+NVL((length(BOARD_CONTENT) - length(replace(BOARD_CONTENT,#{search},''))) ,1)
			+NVL((length(BOARD_NICKNAME) - length(replace(BOARD_NICKNAME,#{search},''))) ,1)))
				</foreach>
			)as searchcount 
			</when>
		</choose>
		FROM board GROUP BY board_id) 
		<choose>
			<when test="searchlist.size != 0 and searchlist[0] != ''">
			WHERE searchcount != 0
			</when>
		</choose>
	</select>

	<!-- 태그검색 ver3 -->
	<select id="allSearchTag" resultType="first.com.model.BoardDTO">
	SELECT * FROM (SELECT a.board_id, count(b.scrap_id) scrap_count 
	FROM (select board_id from board) a 
	LEFT OUTER JOIN SCRAP b ON a.board_id = b.board_id GROUP BY a.board_id) c 
	LEFT OUTER JOIN BOARD d ON c.board_id = d.board_id 
 	WHERE 
		board_tag LIKE #{tag} OR
		board_tag LIKE #{tag2}||'%' OR
		board_tag LIKE '%'||#{tag3} OR
		board_tag LIKE '%'||#{tag4}||'%' 
		<if test="sort!=''">
			ORDER BY 
			<if test="sort == 'like'">d.board_like DESC,</if>
			<if test="sort== 'comment'">d.board_comment_count DESC,</if>
			<if test="sort== 'scrap'">c.scrap_count DESC,</if>
			<if test="sort== 'hit'">d.board_hit DESC,</if>
			 d.board_id DESC
		</if>
		<if test="sort==''">
		 ORDER BY d.board_id DESC
		</if>
	</select>

</mapper>